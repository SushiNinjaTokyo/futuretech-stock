<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>futuretech-stock â€” Daily Top 10 ({{ date | default('', true) }})</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <!-- external CSS -->
  <link rel="stylesheet" href="/assets/daily.css" />
</head>
<body>
  <div class="wrap">
    <header>
      <h1>futuretech-stock â€” Daily Top 10</h1>
      <div class="sub">Date: {{ date | default('', true) }} / Scoring: 1000 pts (volume + dii + trends + news)</div>
    </header>

    {% if top10 is defined %}
    <div class="grid" id="cards">
      {% for item in top10 %}
        {% set _sym  = item.symbol | default('', true) %}
        {% set _name = item.name   | default('', true) %}
        {% set rank  = (item.rank | default(loop.index, true)) %}
        {% set chart_url = (item.chart_url | default('/charts/' ~ (date | default('', true)) ~ '/' ~ _sym ~ '.png', true)) %}
        {% set pts  = item.score_pts | default((item.final_score_0_1|default(0,true) * 1000) | round(0, 'common'), true) %}
        {% set vol  = (item.detail.vol_anomaly if (item.detail is defined and item.detail and item.detail.vol_anomaly is defined) else none) %}

        {# price deltas; expected from fetch_daily.py (fallback to None) #}
        {% set d1 = item.price_delta_1d if item.price_delta_1d is defined else none %}
        {% set d5 = item.price_delta_1w if item.price_delta_1w is defined else none %}
        {% set d20= item.price_delta_1m if item.price_delta_1m is defined else none %}

        <div class="card" id="card-{{ loop.index }}" data-symbol="{{ _sym }}">
          <div class="row">
            <div class="left">
              {% if rank <= 3 %}
                {% set rank_class = 'rank1' if rank==1 else ('rank2' if rank==2 else 'rank3') %}
                <div class="rank-rocket {{ rank_class }}" aria-label="Rank {{ rank }}">
                  <!-- rocket SVG -->
                  <svg class="rocket" viewBox="0 0 24 24" role="img" aria-hidden="true">
                    <path d="M12 3c3 0 6 3.2 6 6.8 0 1.4-.4 2.8-1.1 4l-2.4 4c-.3.6-.9 1-1.6 1h-2.8c-.7 0-1.3-.4-1.6-1l-2.4-4A8.2 8.2 0 0 1 6 9.8C6 6.2 9 3 12 3Z" fill="#ffffff"/>
                    <circle cx="12" cy="9.4" r="2.1" fill="#94a3b8"/>
                    <path d="M7.8 13.5l2.1 3.5H7.6a1 1 0 0 1-.9-1.4l1.1-2.1z" fill="#cbd5e1"/>
                    <path d="M16.2 13.5l-2.1 3.5h2.3c.8 0 1.3-.9.9-1.6l-1.1-1.9z" fill="#cbd5e1"/>
                    <path class="flame" d="M11.2 20.5c-.8-1.2.6-2.4.8-2.9.2.5 1.6 1.7.8 2.9-.5.8-1.9.8-2.4 0z" fill="#f97316"/>
                  </svg>
                </div>
              {% else %}
                <div class="rank-badge" aria-label="Rank {{ rank }}">{{ rank }}</div>
              {% endif %}

              <div class="id-block">
                <div class="symbol">{{ _sym }}</div>
                {% if _name %}<div class="name">{{ _name }}</div>{% endif %}

                <!-- medals (Top3 of Trends / News) -->
                <div class="medals"></div>
              </div>
            </div>

            <div class="score">
              <div class="num">{{ pts | int }}</div>
              <div class="den">/ 1000</div>
            </div>
          </div>

          <!-- price chips -->
          <div class="price-row">
            {% set cls1 = (d1 is not none) and ('up' if d1>0 else ('down' if d1<0 else 'neutral')) or 'neutral' %}
            {% set cls5 = (d5 is not none) and ('up' if d5>0 else ('down' if d5<0 else 'neutral')) or 'neutral' %}
            {% set cls20= (d20 is not none) and ('up' if d20>0 else ('down' if d20<0 else 'neutral')) or 'neutral' %}
            <div class="pch {{ cls1 }}"><span class="k">1D</span><span class="delta">{{ d1 is not none and ("%+.2f%%"|format(d1)) or "â€”" }}</span></div>
            <div class="pch {{ cls5 }}"><span class="k">1W</span><span class="delta">{{ d5 is not none and ("%+.2f%%"|format(d5)) or "â€”" }}</span></div>
            <div class="pch {{ cls20 }}"><span class="k">1M</span><span class="delta">{{ d20 is not none and ("%+.2f%%"|format(d20)) or "â€”" }}</span></div>
          </div>

          <!-- segmented toggle -->
          <div class="tabs">
            <div class="seg" role="tablist" aria-label="Card sections">
              <button class="segbtn" role="tab" aria-selected="false" aria-pressed="false"
                      data-target="#ov-{{ loop.index }}"><span class="ico">ðŸ§­</span>Overview</button>
              <button class="segbtn" role="tab" aria-selected="false" aria-pressed="false"
                      data-target="#tech-{{ loop.index }}"><span class="ico">ðŸ“ˆ</span>Weekly chart</button>
            </div>

            <!-- Overview -->
            <div id="ov-{{ loop.index }}" class="tab" role="tabpanel" aria-hidden="true">
              <table class="table js-breakdown">
                <thead>
                  <tr>
                    <th>Component</th>
                    <th class="right">Normalized</th>
                    <th class="right">Weight</th>
                    <th class="right">Contribution (pts)</th>
                  </tr>
                </thead>
                <tbody></tbody>
                <tfoot>
                  <tr>
                    <th colspan="3" class="right">Total</th>
                    <th class="right"><span class="js-total">{{ pts | int }}</span></th>
                  </tr>
                </tfoot>
              </table>

              <details>
                <summary>Volume anomaly details</summary>
                {% if vol %}
                  {% set rvol20 = vol.get('rvol20') %}
                  {% set z60 = vol.get('z60') %}
                  {% set pr90 = vol.get('pct_rank_90') %}
                  {% set dv = vol.get('dollar_vol') %}
                  {% set eligible = vol.get('eligible') %}
                  <div class="kv">
                    <div><span class="k">RVOL20</span><br>{{ rvol20 is not none and "%.2f"|format(rvol20) or "-" }}</div>
                    <div><span class="k">Z60</span><br>{{ z60 is not none and "%.2f"|format(z60) or "-" }}</div>
                    <div><span class="k">PctRank90</span><br>{{ pr90 is not none and "%.2f"|format(pr90) or "-" }}</div>
                    <div><span class="k">DollarVol</span><br>{% if dv is not none %}${{ "%.1f"|format(dv/1_000_000) }}M{% else %}-{% endif %}</div>
                    <div><span class="k">Eligible</span><br>{{ eligible and "Yes" or "No" }}</div>
                  </div>
                {% else %}
                  <div class="muted">No details.</div>
                {% endif %}
              </details>

              <!-- legend (simplified English) -->
              <div class="note">
                * Price changes: 1D = vs previous trading day; 1W = vs 5 trading days ago; 1M = vs 20 trading days ago.<br/>
                * Trends: Google Trends relative score (recent window).<br/>
                * News: recent article volume Ã— quick sentiment, normalized across todayâ€™s universe.
              </div>
            </div>

            <!-- Technical -->
            <div id="tech-{{ loop.index }}" class="tab" role="tabpanel" aria-hidden="true">
              <img src="{{ chart_url }}" alt="{{ _sym }} weekly chart" class="chart" loading="lazy" />
            </div>
          </div>

          <!-- JSON payload for JS -->
          <script type="application/json" class="js-payload">
          {{ {
            "symbol": _sym,
            "score_components": (item.score_components if item.score_components is defined else {}),
            "score_weights": (item.score_weights if item.score_weights is defined else {}),
            "final_score_0_1": item.final_score_0_1 | default(0, true),
            "score_pts": pts | int,
            "trends_breakout": item.trends_breakout | default(0, true),
            "news_score": item.news_score | default(0, true),
            "vol_anomaly_score": item.vol_anomaly_score | default(0, true),
            "news_recent_count": item.news_recent_count | default(0, true)
          } | tojson }}
          </script>
        </div>
      {% endfor %}
    </div>
    {% else %}
      <div id="cards" class="grid"></div>
    {% endif %}
  </div>

  <script>
    // segmented toggle per card
    function bindToggles(scope=document){
      scope.querySelectorAll(".card").forEach(card=>{
        const seg = card.querySelector(".seg");
        if(!seg) return;
        const buttons = [...seg.querySelectorAll(".segbtn")];
        const panels  = [...card.querySelectorAll(".tab")];

        function openPanel(btn){
          const sel   = btn.getAttribute("data-target");
          const panel = card.querySelector(sel);
          const isActive = panel.classList.contains("active");
          buttons.forEach(b=>{ b.setAttribute("aria-pressed","false"); b.setAttribute("aria-selected","false"); });
          panels.forEach(p=>{ p.classList.remove("active"); p.setAttribute("aria-hidden","true"); });
          if(!isActive){
            btn.setAttribute("aria-pressed","true");
            btn.setAttribute("aria-selected","true");
            panel.classList.add("active");
            panel.setAttribute("aria-hidden","false");
          }
        }
        buttons.forEach(btn=>{
          btn.addEventListener("click", ()=> openPanel(btn));
          btn.addEventListener("keydown",(e)=>{ if(e.key==="Enter"||e.key===" "){ e.preventDefault(); openPanel(btn);} });
        });
      });
    }

    // score breakdown table from payload
    function fillBreakdown(){
      document.querySelectorAll(".card").forEach(card=>{
        const payloadEl=card.querySelector(".js-payload");
        if(!payloadEl) return;
        let data={};
        try{ data=JSON.parse(payloadEl.textContent||"{}"); }catch(_){}
        const comps=data.score_components||{};
        const weights=data.score_weights||{};
        const keys=Object.keys(comps).filter(k=>comps[k]!=null);
        const wsum=keys.reduce((s,k)=>s+Math.max(0,Number(weights[k]||0)),0)||1;
        const tbody=card.querySelector(".js-breakdown tbody");
        const totalEl=card.querySelector(".js-total");
        if(!tbody) return;
        tbody.innerHTML="";
        let totalPts=0;
        const label=k=>({price_vol_anom:"Volume anomaly", dii:"dii", trends_breakout:"Trends breakout", news:"News coverage"}[k]||k);
        keys.forEach(k=>{
          const v=Math.max(0,Math.min(1,Number(comps[k]||0)));
          const wn=Math.max(0,Number(weights[k]||0))/wsum;
          const pts=Math.round(v*wn*1000);
          totalPts+=pts;
          const tr=document.createElement("tr");
          tr.innerHTML=`<td>${label(k)}</td><td class="right">${v.toFixed(2)}</td><td class="right">${(wn*100).toFixed(0)}%</td><td class="right">${pts}</td>`;
          tbody.appendChild(tr);
        });
        if(totalEl) totalEl.textContent=String(totalPts);
      });
    }

    // medals for Top3 of Trends / News
    function decorateTop3Medals(){
      const cards=[...document.querySelectorAll(".card")].map(card=>{
        let data={};
        try{ data=JSON.parse(card.querySelector(".js-payload")?.textContent||"{}"); }catch(_){}
        return {
          card,
          symbol: card.getAttribute("data-symbol"),
          trends: Number(data.trends_breakout||0),
          news:   Number(data.news_score||0)
        };
      });
      const rankBy = (arr, key)=>
        [...arr].sort((a,b)=>Number(b[key])-Number(a[key]))
                .map((o,i)=>({...o,_rank:i+1}))
                .filter(o=>o[key]>0 && o._rank<=3);
      const tMap=new Map(rankBy(cards,"trends").map(o=>[o.symbol,o._rank]));
      const nMap=new Map(rankBy(cards,"news").map(o=>[o.symbol,o._rank]));
      const medalInfo = r => r===1?{cls:"gold",emoji:"ðŸ¥‡"}:r===2?{cls:"silver",emoji:"ðŸ¥ˆ"}:{cls:"bronze",emoji:"ðŸ¥‰"};
      cards.forEach(({card,symbol})=>{
        const box=card.querySelector(".medals"); if(!box) return;
        box.innerHTML="";
        const t=tMap.get(symbol); if(t){ const m=medalInfo(t); const el=document.createElement("span");
          el.className=`medal ${m.cls}`; el.title=`Trends Top #${t}`;
          el.innerHTML=`<span class="emoji">${m.emoji}</span><span class="label"><span class="kind">Trends</span></span>`;
          box.appendChild(el);
        }
        const n=nMap.get(symbol); if(n){ const m=medalInfo(n); const el=document.createElement("span");
          el.className=`medal ${m.cls}`; el.title=`News Top #${n}`;
          el.innerHTML=`<span class="emoji">${m.emoji}</span><span class="label"><span class="kind">News</span></span>`;
          box.appendChild(el);
        }
      });
    }

    // INIT
    bindToggles();
    fillBreakdown();
    decorateTop3Medals();
  </script>
</body>
</html>
